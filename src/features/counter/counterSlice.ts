import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { Pokemon } from "../../types/Pokemon";
import { ResultApi } from "../../types/ResultApi";
import { TypeApi } from "../../types/TypeApi";

export interface CounterState {
  value: Pokemon[];
  status: "idle" | "loading" | "failed";
}

const initialState: CounterState = {
  value: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const res = await fetch("https://pokeapi.co/api/v2/pokemon/");
    const resJson = await res.json();
    const pokemons: Pokemon[] = resJson.results.map(
       async (item: ResultApi) => {
        const pokemon = await fetch(item.url);
        const pokemonJson = await pokemon.json();
        const output: Pokemon = {
          name: item.name,
          type: pokemonJson.types.map((item: TypeApi) => item.type.name),
          sprite: pokemonJson.sprites.front_default,
          height: pokemonJson.height,
          weight: pokemonJson.weight,
        };
        return output;
      }
    );
    return Promise.all(pokemons).then((values) => values);
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = state.value.concat(action.payload);
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default counterSlice.reducer;
